package com.example.xmlsoccer.service;

//------------------------------------------------------------------------------
// <wsdl2code-generated>
//    This code was generated by http://www.wsdl2code.com version  2.5
//
// Date Of Creation: 5/19/2014 4:32:36 PM
//    Please dont change this code, regeneration will override your changes
//</wsdl2code-generated>
//
//------------------------------------------------------------------------------
//
//This source code was auto-generated by Wsdl2Code  Version
//
import java.util.List;

import org.ksoap2.HeaderProperty;
import org.ksoap2.SoapEnvelope;
import org.ksoap2.SoapFault;
import org.ksoap2.serialization.SoapObject;
import org.ksoap2.serialization.SoapPrimitive;
import org.ksoap2.serialization.SoapSerializationEnvelope;
import org.ksoap2.transport.HttpTransportSE;

import android.os.AsyncTask;

import com.example.xmlsoccer.service.WS_Enums.SoapProtocolVersion;
import com.example.xmlsoccer.service.model.GetEarliestMatchDateResponse;
import com.example.xmlsoccer.service.model.GetFixturesByIntervalResponse;
import com.example.xmlsoccer.service.model.GetHistoricMatchResponse;
import com.example.xmlsoccer.service.model.GetHistoricMatchesByIntervalResponse;
import com.example.xmlsoccer.service.model.GetLeagueListResponse;
import com.example.xmlsoccer.service.model.GetLiveScoreListResponse;
import com.example.xmlsoccer.service.model.GetPlayerListResponse;
import com.example.xmlsoccer.service.model.GetPlayerResponse;
import com.example.xmlsoccer.service.model.GetTeamLeagueStandingListResponse;
import com.example.xmlsoccer.service.model.GetTeamListResponse;
import com.example.xmlsoccer.service.model.GetTeamResponse;
import com.example.xmlsoccer.service.model.GetTopScorerByLeagueAndSeasonResponse;

public class FootballDataDemo {
    
    public String NAMESPACE ="http://xmlsoccer.com/";
    public String url="http://www.xmlsoccer.com/FootballDataDemo.asmx";
    public int timeOut = 60000;
    public IWsdl2CodeEvents eventHandler;
    public SoapProtocolVersion soapVersion;
    
    public FootballDataDemo(){}
    
    public FootballDataDemo(IWsdl2CodeEvents eventHandler)
    {
        this.eventHandler = eventHandler;
    }
    public FootballDataDemo(IWsdl2CodeEvents eventHandler,String url)
    {
        this.eventHandler = eventHandler;
        this.url = url;
    }
    public FootballDataDemo(IWsdl2CodeEvents eventHandler,String url,int timeOutInSeconds)
    {
        this.eventHandler = eventHandler;
        this.url = url;
        this.setTimeOut(timeOutInSeconds);
    }
    public void setTimeOut(int seconds){
        this.timeOut = seconds * 1000;
    }
    public void setUrl(String url){
        this.url = url;
    }
    public void GetTeamAsync(String apiKey,String teamName) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        GetTeamAsync(apiKey, teamName, null);
    }
    
    public void GetTeamAsync(final String apiKey,final String teamName,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, GetTeamResponse>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected GetTeamResponse doInBackground(Void... params) {
                return GetTeam(apiKey, teamName, headers);
            }
            @Override
            protected void onPostExecute(GetTeamResponse result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("GetTeam", result);
                }
            }
        }.execute();
    }
    
    public GetTeamResponse GetTeam(String apiKey,String teamName){
        return GetTeam(apiKey, teamName, null);
    }
    
    public GetTeamResponse GetTeam(String apiKey,String teamName,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://xmlsoccer.com/","GetTeam");
        soapReq.addProperty("ApiKey",apiKey);
        soapReq.addProperty("teamName",teamName);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://xmlsoccer.com/GetTeam", soapEnvelope,headers);
            }else{
                httpTransport.call("http://xmlsoccer.com/GetTeam", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                return GetTeamResponse.parse(result);
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void GetOddsByFixtureMatchIdAsync(String apiKey,String fixtureMatch_Id) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        GetOddsByFixtureMatchIdAsync(apiKey, fixtureMatch_Id, null);
    }
    
    public void GetOddsByFixtureMatchIdAsync(final String apiKey,final String fixtureMatch_Id,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, Void>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected Void doInBackground(Void... params) {
                GetOddsByFixtureMatchId(apiKey, fixtureMatch_Id, headers);
                return null;
            }
            @Override
            protected void onPostExecute(Void result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("GetOddsByFixtureMatchId", result);
                }
            }
        }.execute();
    }
    
    public void GetOddsByFixtureMatchId(String apiKey,String fixtureMatch_Id){
        GetOddsByFixtureMatchId(apiKey, fixtureMatch_Id, null);
    }
    
    public void GetOddsByFixtureMatchId(String apiKey,String fixtureMatch_Id,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://xmlsoccer.com/","GetOddsByFixtureMatchId");
        soapReq.addProperty("ApiKey",apiKey);
        soapReq.addProperty("fixtureMatch_Id",fixtureMatch_Id);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://xmlsoccer.com/GetOddsByFixtureMatchId", soapEnvelope,headers);
            }else{
                httpTransport.call("http://xmlsoccer.com/GetOddsByFixtureMatchId", soapEnvelope);
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
    }
    
    public void GetOddsByFixtureMatchId2Async(String apiKey,String fixtureMatch_Id) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        GetOddsByFixtureMatchId2Async(apiKey, fixtureMatch_Id, null);
    }
    
    public void GetOddsByFixtureMatchId2Async(final String apiKey,final String fixtureMatch_Id,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, Void>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected Void doInBackground(Void... params) {
                GetOddsByFixtureMatchId2(apiKey, fixtureMatch_Id, headers);
                return null;
            }
            @Override
            protected void onPostExecute(Void result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("GetOddsByFixtureMatchId2", result);
                }
            }
        }.execute();
    }
    
    public void GetOddsByFixtureMatchId2(String apiKey,String fixtureMatch_Id){
        GetOddsByFixtureMatchId2(apiKey, fixtureMatch_Id, null);
    }
    
    public void GetOddsByFixtureMatchId2(String apiKey,String fixtureMatch_Id,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://xmlsoccer.com/","GetOddsByFixtureMatchId2");
        soapReq.addProperty("ApiKey",apiKey);
        soapReq.addProperty("fixtureMatch_Id",fixtureMatch_Id);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://xmlsoccer.com/GetOddsByFixtureMatchId2", soapEnvelope,headers);
            }else{
                httpTransport.call("http://xmlsoccer.com/GetOddsByFixtureMatchId2", soapEnvelope);
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
    }
    
    public void CheckApiKeyAsync(String apiKey) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        CheckApiKeyAsync(apiKey, null);
    }
    
    public void CheckApiKeyAsync(final String apiKey,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, String>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected String doInBackground(Void... params) {
                return CheckApiKey(apiKey, headers);
            }
            @Override
            protected void onPostExecute(String result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("CheckApiKey", result);
                }
            }
        }.execute();
    }
    
    public String CheckApiKey(String apiKey){
        return CheckApiKey(apiKey, null);
    }
    
    public String CheckApiKey(String apiKey,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://xmlsoccer.com/","CheckApiKey");
        soapReq.addProperty("ApiKey",apiKey);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://xmlsoccer.com/CheckApiKey", soapEnvelope,headers);
            }else{
                httpTransport.call("http://xmlsoccer.com/CheckApiKey", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                        SoapPrimitive j =(SoapPrimitive) obj;
                        String resultVariable = j.toString();
                        return resultVariable;
                    }else if (obj!= null && obj instanceof String){
                        String resultVariable = (String) obj;
                        return resultVariable;
                    }
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return "";
    }
    
    public void GetHistoricMatchesByTeamAndDateIntervalAsync(String apiKey,String teamId,String startDateString,String endDateString) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        GetHistoricMatchesByTeamAndDateIntervalAsync(apiKey, teamId, startDateString, endDateString, null);
    }
    
    public void GetHistoricMatchesByTeamAndDateIntervalAsync(final String apiKey,final String teamId,final String startDateString,final String endDateString,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, GetHistoricMatchesByIntervalResponse>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected GetHistoricMatchesByIntervalResponse doInBackground(Void... params) {
                return GetHistoricMatchesByTeamAndDateInterval(apiKey, teamId, startDateString, endDateString, headers);
            }
            @Override
            protected void onPostExecute(GetHistoricMatchesByIntervalResponse result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("GetHistoricMatchesByTeamAndDateInterval", result);
                }
            }
        }.execute();
    }
    
    public GetHistoricMatchesByIntervalResponse GetHistoricMatchesByTeamAndDateInterval(String apiKey,String teamId,String startDateString,String endDateString){
        return GetHistoricMatchesByTeamAndDateInterval(apiKey, teamId, startDateString, endDateString, null);
    }
    
    public GetHistoricMatchesByIntervalResponse GetHistoricMatchesByTeamAndDateInterval(String apiKey,String teamId,String startDateString,String endDateString,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://xmlsoccer.com/","GetHistoricMatchesByTeamAndDateInterval");
        soapReq.addProperty("ApiKey",apiKey);
        soapReq.addProperty("teamId",teamId);
        soapReq.addProperty("startDateString",startDateString);
        soapReq.addProperty("endDateString",endDateString);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://xmlsoccer.com/GetHistoricMatchesByTeamAndDateInterval", soapEnvelope,headers);
            }else{
                httpTransport.call("http://xmlsoccer.com/GetHistoricMatchesByTeamAndDateInterval", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                return GetHistoricMatchesByIntervalResponse.parse(result);
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void GetHistoricMatchesByIDAsync(String apiKey,int id) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        GetHistoricMatchesByIDAsync(apiKey, id, null);
    }
    
    public void GetHistoricMatchesByIDAsync(final String apiKey,final int id,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, GetHistoricMatchResponse>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected GetHistoricMatchResponse doInBackground(Void... params) {
                return GetHistoricMatchesByID(apiKey, id, headers);
            }
            @Override
            protected void onPostExecute(GetHistoricMatchResponse result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("GetHistoricMatchesByID", result);
                }
            }
        }.execute();
    }
    
    public GetHistoricMatchResponse GetHistoricMatchesByID(String apiKey,int id){
        return GetHistoricMatchesByID(apiKey, id, null);
    }
    
    public GetHistoricMatchResponse GetHistoricMatchesByID(String apiKey,int id,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://xmlsoccer.com/","GetHistoricMatchesByID");
        soapReq.addProperty("ApiKey",apiKey);
        soapReq.addProperty("Id",id);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://xmlsoccer.com/GetHistoricMatchesByID", soapEnvelope,headers);
            }else{
                httpTransport.call("http://xmlsoccer.com/GetHistoricMatchesByID", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                return GetHistoricMatchResponse.parse(result);
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void GetTopScorersByLeagueAndSeasonAsync(String apiKey,String league,String seasonDateString) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        GetTopScorersByLeagueAndSeasonAsync(apiKey, league, seasonDateString, null);
    }
    
    public void GetTopScorersByLeagueAndSeasonAsync(final String apiKey,final String league,final String seasonDateString,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, GetTopScorerByLeagueAndSeasonResponse>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected GetTopScorerByLeagueAndSeasonResponse doInBackground(Void... params) {
                return GetTopScorersByLeagueAndSeason(apiKey, league, seasonDateString, headers);
            }
            @Override
            protected void onPostExecute(GetTopScorerByLeagueAndSeasonResponse result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("GetTopScorersByLeagueAndSeason", result);
                }
            }
        }.execute();
    }
    
    public GetTopScorerByLeagueAndSeasonResponse GetTopScorersByLeagueAndSeason(String apiKey,String league,String seasonDateString){
        return GetTopScorersByLeagueAndSeason(apiKey, league, seasonDateString, null);
    }
    
    public GetTopScorerByLeagueAndSeasonResponse GetTopScorersByLeagueAndSeason(String apiKey,String league,String seasonDateString,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://xmlsoccer.com/","GetTopScorersByLeagueAndSeason");
        soapReq.addProperty("ApiKey",apiKey);
        soapReq.addProperty("league",league);
        soapReq.addProperty("seasonDateString",seasonDateString);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://xmlsoccer.com/GetTopScorersByLeagueAndSeason", soapEnvelope,headers);
            }else{
                httpTransport.call("http://xmlsoccer.com/GetTopScorersByLeagueAndSeason", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                return GetTopScorerByLeagueAndSeasonResponse.parse(result);
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void GetHistoricMatchesByFixtureMatchIDAsync(String apiKey,int id) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        GetHistoricMatchesByFixtureMatchIDAsync(apiKey, id, null);
    }
    
    public void GetHistoricMatchesByFixtureMatchIDAsync(final String apiKey,final int id,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, GetHistoricMatchResponse>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected GetHistoricMatchResponse doInBackground(Void... params) {
                return GetHistoricMatchesByFixtureMatchID(apiKey, id, headers);
            }
            @Override
            protected void onPostExecute(GetHistoricMatchResponse result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("GetHistoricMatchesByFixtureMatchID", result);
                }
            }
        }.execute();
    }
    
    public GetHistoricMatchResponse GetHistoricMatchesByFixtureMatchID(String apiKey,int id){
        return GetHistoricMatchesByFixtureMatchID(apiKey, id, null);
    }
    
    public GetHistoricMatchResponse GetHistoricMatchesByFixtureMatchID(String apiKey,int id,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://xmlsoccer.com/","GetHistoricMatchesByFixtureMatchID");
        soapReq.addProperty("ApiKey",apiKey);
        soapReq.addProperty("Id",id);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://xmlsoccer.com/GetHistoricMatchesByFixtureMatchID", soapEnvelope,headers);
            }else{
                httpTransport.call("http://xmlsoccer.com/GetHistoricMatchesByFixtureMatchID", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                return GetHistoricMatchResponse.parse(result);
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void GetHistoricMatchesByLeagueAndDateIntervalAsync(String apiKey,String league,String startDateString,String endDateString) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        GetHistoricMatchesByLeagueAndDateIntervalAsync(apiKey, league, startDateString, endDateString, null);
    }
    
    public void GetHistoricMatchesByLeagueAndDateIntervalAsync(final String apiKey,final String league,final String startDateString,final String endDateString,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, GetHistoricMatchesByIntervalResponse>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected GetHistoricMatchesByIntervalResponse doInBackground(Void... params) {
                return GetHistoricMatchesByLeagueAndDateInterval(apiKey, league, startDateString, endDateString, headers);
            }
            @Override
            protected void onPostExecute(GetHistoricMatchesByIntervalResponse result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("GetHistoricMatchesByLeagueAndDateInterval", result);
                }
            }
        }.execute();
    }
    
    public GetHistoricMatchesByIntervalResponse GetHistoricMatchesByLeagueAndDateInterval(String apiKey,String league,String startDateString,String endDateString){
        return GetHistoricMatchesByLeagueAndDateInterval(apiKey, league, startDateString, endDateString, null);
    }
    
    public GetHistoricMatchesByIntervalResponse GetHistoricMatchesByLeagueAndDateInterval(String apiKey,String league,String startDateString,String endDateString,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://xmlsoccer.com/","GetHistoricMatchesByLeagueAndDateInterval");
        soapReq.addProperty("ApiKey",apiKey);
        soapReq.addProperty("league",league);
        soapReq.addProperty("startDateString",startDateString);
        soapReq.addProperty("endDateString",endDateString);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://xmlsoccer.com/GetHistoricMatchesByLeagueAndDateInterval", soapEnvelope,headers);
            }else{
                httpTransport.call("http://xmlsoccer.com/GetHistoricMatchesByLeagueAndDateInterval", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                return GetHistoricMatchesByIntervalResponse.parse(result);
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void GetHistoricMatchesByLeagueAndSeasonAsync(String apiKey,String league,String seasonDateString) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        GetHistoricMatchesByLeagueAndSeasonAsync(apiKey, league, seasonDateString, null);
    }
    
    public void GetHistoricMatchesByLeagueAndSeasonAsync(final String apiKey,final String league,final String seasonDateString,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, GetHistoricMatchesByIntervalResponse>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected GetHistoricMatchesByIntervalResponse doInBackground(Void... params) {
                return GetHistoricMatchesByLeagueAndSeason(apiKey, league, seasonDateString, headers);
            }
            @Override
            protected void onPostExecute(GetHistoricMatchesByIntervalResponse result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("GetHistoricMatchesByLeagueAndSeason", result);
                }
            }
        }.execute();
    }
    
    public GetHistoricMatchesByIntervalResponse GetHistoricMatchesByLeagueAndSeason(String apiKey,String league,String seasonDateString){
        return GetHistoricMatchesByLeagueAndSeason(apiKey, league, seasonDateString, null);
    }
    
    public GetHistoricMatchesByIntervalResponse GetHistoricMatchesByLeagueAndSeason(String apiKey,String league,String seasonDateString,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://xmlsoccer.com/","GetHistoricMatchesByLeagueAndSeason");
        soapReq.addProperty("ApiKey",apiKey);
        soapReq.addProperty("league",league);
        soapReq.addProperty("seasonDateString",seasonDateString);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://xmlsoccer.com/GetHistoricMatchesByLeagueAndSeason", soapEnvelope,headers);
            }else{
                httpTransport.call("http://xmlsoccer.com/GetHistoricMatchesByLeagueAndSeason", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                return GetHistoricMatchesByIntervalResponse.parse(result);
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void GetHistoricMatchesByTeamsAndDateIntervalAsync(String apiKey,String team1Id,String team2Id,String startDateString,String endDateString) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        GetHistoricMatchesByTeamsAndDateIntervalAsync(apiKey, team1Id, team2Id, startDateString, endDateString, null);
    }
    
    public void GetHistoricMatchesByTeamsAndDateIntervalAsync(final String apiKey,final String team1Id,final String team2Id,final String startDateString,final String endDateString,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, GetHistoricMatchesByIntervalResponse>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected GetHistoricMatchesByIntervalResponse doInBackground(Void... params) {
                return GetHistoricMatchesByTeamsAndDateInterval(apiKey, team1Id, team2Id, startDateString, endDateString, headers);
            }
            @Override
            protected void onPostExecute(GetHistoricMatchesByIntervalResponse result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("GetHistoricMatchesByTeamsAndDateInterval", result);
                }
            }
        }.execute();
    }
    
    public GetHistoricMatchesByIntervalResponse GetHistoricMatchesByTeamsAndDateInterval(String apiKey,String team1Id,String team2Id,String startDateString,String endDateString){
        return GetHistoricMatchesByTeamsAndDateInterval(apiKey, team1Id, team2Id, startDateString, endDateString, null);
    }
    
    public GetHistoricMatchesByIntervalResponse GetHistoricMatchesByTeamsAndDateInterval(String apiKey,String team1Id,String team2Id,String startDateString,String endDateString,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://xmlsoccer.com/","GetHistoricMatchesByTeamsAndDateInterval");
        soapReq.addProperty("ApiKey",apiKey);
        soapReq.addProperty("team1Id",team1Id);
        soapReq.addProperty("team2Id",team2Id);
        soapReq.addProperty("startDateString",startDateString);
        soapReq.addProperty("endDateString",endDateString);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://xmlsoccer.com/GetHistoricMatchesByTeamsAndDateInterval", soapEnvelope,headers);
            }else{
                httpTransport.call("http://xmlsoccer.com/GetHistoricMatchesByTeamsAndDateInterval", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                return GetHistoricMatchesByIntervalResponse.parse(result);
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void GetFixturesByDateIntervalAsync(String apiKey,String startDateString,String endDateString) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        GetFixturesByDateIntervalAsync(apiKey, startDateString, endDateString, null);
    }
    
    public void GetFixturesByDateIntervalAsync(final String apiKey,final String startDateString,final String endDateString,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, GetFixturesByIntervalResponse>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected GetFixturesByIntervalResponse doInBackground(Void... params) {
                return GetFixturesByDateInterval(apiKey, startDateString, endDateString, headers);
            }
            @Override
            protected void onPostExecute(GetFixturesByIntervalResponse result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("GetFixturesByDateInterval", result);
                }
            }
        }.execute();
    }
    
    public GetFixturesByIntervalResponse GetFixturesByDateInterval(String apiKey,String startDateString,String endDateString){
        return GetFixturesByDateInterval(apiKey, startDateString, endDateString, null);
    }
    
    public GetFixturesByIntervalResponse GetFixturesByDateInterval(String apiKey,String startDateString,String endDateString,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://xmlsoccer.com/","GetFixturesByDateInterval");
        soapReq.addProperty("ApiKey",apiKey);
        soapReq.addProperty("startDateString",startDateString);
        soapReq.addProperty("endDateString",endDateString);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://xmlsoccer.com/GetFixturesByDateInterval", soapEnvelope,headers);
            }else{
                httpTransport.call("http://xmlsoccer.com/GetFixturesByDateInterval", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                return GetFixturesByIntervalResponse.parse(result);
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void GetFixturesByDateIntervalAndLeagueAsync(String league,String apiKey,String startDateString,String endDateString) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        GetFixturesByDateIntervalAndLeagueAsync(league, apiKey, startDateString, endDateString, null);
    }
    
    public void GetFixturesByDateIntervalAndLeagueAsync(final String league,final String apiKey,final String startDateString,final String endDateString,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, GetFixturesByIntervalResponse>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected GetFixturesByIntervalResponse doInBackground(Void... params) {
                return GetFixturesByDateIntervalAndLeague(league, apiKey, startDateString, endDateString, headers);
            }
            @Override
            protected void onPostExecute(GetFixturesByIntervalResponse result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("GetFixturesByDateIntervalAndLeague", result);
                }
            }
        }.execute();
    }
    
    public GetFixturesByIntervalResponse GetFixturesByDateIntervalAndLeague(String league,String apiKey,String startDateString,String endDateString){
        return GetFixturesByDateIntervalAndLeague(league, apiKey, startDateString, endDateString, null);
    }
    
    public GetFixturesByIntervalResponse GetFixturesByDateIntervalAndLeague(String league,String apiKey,String startDateString,String endDateString,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://xmlsoccer.com/","GetFixturesByDateIntervalAndLeague");
        soapReq.addProperty("league",league);
        soapReq.addProperty("ApiKey",apiKey);
        soapReq.addProperty("startDateString",startDateString);
        soapReq.addProperty("endDateString",endDateString);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://xmlsoccer.com/GetFixturesByDateIntervalAndLeague", soapEnvelope,headers);
            }else{
                httpTransport.call("http://xmlsoccer.com/GetFixturesByDateIntervalAndLeague", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                return GetFixturesByIntervalResponse.parse(result);
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void GetFixturesByDateIntervalAndTeamAsync(String apiKey,String startDateString,String endDateString,String teamId) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        GetFixturesByDateIntervalAndTeamAsync(apiKey, startDateString, endDateString, teamId, null);
    }
    
    public void GetFixturesByDateIntervalAndTeamAsync(final String apiKey,final String startDateString,final String endDateString,final String teamId,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, GetFixturesByIntervalResponse>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected GetFixturesByIntervalResponse doInBackground(Void... params) {
                return GetFixturesByDateIntervalAndTeam(apiKey, startDateString, endDateString, teamId, headers);
            }
            @Override
            protected void onPostExecute(GetFixturesByIntervalResponse result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("GetFixturesByDateIntervalAndTeam", result);
                }
            }
        }.execute();
    }
    
    public GetFixturesByIntervalResponse GetFixturesByDateIntervalAndTeam(String apiKey,String startDateString,String endDateString,String teamId){
        return GetFixturesByDateIntervalAndTeam(apiKey, startDateString, endDateString, teamId, null);
    }
    
    public GetFixturesByIntervalResponse GetFixturesByDateIntervalAndTeam(String apiKey,String startDateString,String endDateString,String teamId,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://xmlsoccer.com/","GetFixturesByDateIntervalAndTeam");
        soapReq.addProperty("ApiKey",apiKey);
        soapReq.addProperty("startDateString",startDateString);
        soapReq.addProperty("endDateString",endDateString);
        soapReq.addProperty("teamId",teamId);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://xmlsoccer.com/GetFixturesByDateIntervalAndTeam", soapEnvelope,headers);
            }else{
                httpTransport.call("http://xmlsoccer.com/GetFixturesByDateIntervalAndTeam", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                return GetFixturesByIntervalResponse.parse(result);
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void GetAllTeamsAsync(String apiKey) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        GetAllTeamsAsync(apiKey, null);
    }
    
    public void GetAllTeamsAsync(final String apiKey,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, GetTeamListResponse>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected GetTeamListResponse doInBackground(Void... params) {
                return GetAllTeams(apiKey, headers);
            }
            @Override
            protected void onPostExecute(GetTeamListResponse result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("GetAllTeams", result);
                }
            }
        }.execute();
    }
    
    public GetTeamListResponse GetAllTeams(String apiKey){
        return GetAllTeams(apiKey, null);
    }
    
    public GetTeamListResponse GetAllTeams(String apiKey,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://xmlsoccer.com/","GetAllTeams");
        soapReq.addProperty("ApiKey",apiKey);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://xmlsoccer.com/GetAllTeams", soapEnvelope,headers);
            }else{
                httpTransport.call("http://xmlsoccer.com/GetAllTeams", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                return GetTeamListResponse.parse(result);
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void GetAllLeaguesAsync(String apiKey) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        GetAllLeaguesAsync(apiKey, null);
    }
    
    public void GetAllLeaguesAsync(final String apiKey,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, GetLeagueListResponse>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected GetLeagueListResponse doInBackground(Void... params) {
                return GetAllLeagues(apiKey, headers);
            }
            @Override
            protected void onPostExecute(GetLeagueListResponse result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("GetAllLeagues", result);
                }
            }
        }.execute();
    }
    
    public GetLeagueListResponse GetAllLeagues(String apiKey){
        return GetAllLeagues(apiKey, null);
    }
    
    public GetLeagueListResponse GetAllLeagues(String apiKey,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://xmlsoccer.com/","GetAllLeagues");
        soapReq.addProperty("ApiKey",apiKey);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://xmlsoccer.com/GetAllLeagues", soapEnvelope,headers);
            }else{
                httpTransport.call("http://xmlsoccer.com/GetAllLeagues", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                return GetLeagueListResponse.parse(result);
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void GetFixturesByLeagueAndSeasonAsync(String apiKey,String seasonDateString,String league) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        GetFixturesByLeagueAndSeasonAsync(apiKey, seasonDateString, league, null);
    }
    
    public void GetFixturesByLeagueAndSeasonAsync(final String apiKey,final String seasonDateString,final String league,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, GetFixturesByIntervalResponse>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected GetFixturesByIntervalResponse doInBackground(Void... params) {
                return GetFixturesByLeagueAndSeason(apiKey, seasonDateString, league, headers);
            }
            @Override
            protected void onPostExecute(GetFixturesByIntervalResponse result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("GetFixturesByLeagueAndSeason", result);
                }
            }
        }.execute();
    }
    
    public GetFixturesByIntervalResponse GetFixturesByLeagueAndSeason(String apiKey,String seasonDateString,String league){
        return GetFixturesByLeagueAndSeason(apiKey, seasonDateString, league, null);
    }
    
    public GetFixturesByIntervalResponse GetFixturesByLeagueAndSeason(String apiKey,String seasonDateString,String league,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://xmlsoccer.com/","GetFixturesByLeagueAndSeason");
        soapReq.addProperty("ApiKey",apiKey);
        soapReq.addProperty("seasonDateString",seasonDateString);
        soapReq.addProperty("league",league);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://xmlsoccer.com/GetFixturesByLeagueAndSeason", soapEnvelope,headers);
            }else{
                httpTransport.call("http://xmlsoccer.com/GetFixturesByLeagueAndSeason", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                return GetFixturesByIntervalResponse.parse(result);
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void GetLeagueStandingsBySeasonAsync(String apiKey,String league,String seasonDateString) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        GetLeagueStandingsBySeasonAsync(apiKey, league, seasonDateString, null);
    }
    
    public void GetLeagueStandingsBySeasonAsync(final String apiKey,final String league,final String seasonDateString,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, GetTeamLeagueStandingListResponse>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected GetTeamLeagueStandingListResponse doInBackground(Void... params) {
                return GetLeagueStandingsBySeason(apiKey, league, seasonDateString, headers);
            }
            @Override
            protected void onPostExecute(GetTeamLeagueStandingListResponse result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("GetLeagueStandingsBySeason", result);
                }
            }
        }.execute();
    }
    
    public GetTeamLeagueStandingListResponse GetLeagueStandingsBySeason(String apiKey,String league,String seasonDateString){
        return GetLeagueStandingsBySeason(apiKey, league, seasonDateString, null);
    }
    
    public GetTeamLeagueStandingListResponse GetLeagueStandingsBySeason(String apiKey,String league,String seasonDateString,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://xmlsoccer.com/","GetLeagueStandingsBySeason");
        soapReq.addProperty("ApiKey",apiKey);
        soapReq.addProperty("league",league);
        soapReq.addProperty("seasonDateString",seasonDateString);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://xmlsoccer.com/GetLeagueStandingsBySeason", soapEnvelope,headers);
            }else{
                httpTransport.call("http://xmlsoccer.com/GetLeagueStandingsBySeason", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                return GetTeamLeagueStandingListResponse.parse(result);
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void GetAllTeamsByLeagueAndSeasonAsync(String apiKey,String league,String seasonDateString) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        GetAllTeamsByLeagueAndSeasonAsync(apiKey, league, seasonDateString, null);
    }
    
    public void GetAllTeamsByLeagueAndSeasonAsync(final String apiKey,final String league,final String seasonDateString,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, GetTeamListResponse>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected GetTeamListResponse doInBackground(Void... params) {
                return GetAllTeamsByLeagueAndSeason(apiKey, league, seasonDateString, headers);
            }
            @Override
            protected void onPostExecute(GetTeamListResponse result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("GetAllTeamsByLeagueAndSeason", result);
                }
            }
        }.execute();
    }
    
    public GetTeamListResponse GetAllTeamsByLeagueAndSeason(String apiKey,String league,String seasonDateString){
        return GetAllTeamsByLeagueAndSeason(apiKey, league, seasonDateString, null);
    }
    
    public GetTeamListResponse GetAllTeamsByLeagueAndSeason(String apiKey,String league,String seasonDateString,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://xmlsoccer.com/","GetAllTeamsByLeagueAndSeason");
        soapReq.addProperty("ApiKey",apiKey);
        soapReq.addProperty("league",league);
        soapReq.addProperty("seasonDateString",seasonDateString);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://xmlsoccer.com/GetAllTeamsByLeagueAndSeason", soapEnvelope,headers);
            }else{
                httpTransport.call("http://xmlsoccer.com/GetAllTeamsByLeagueAndSeason", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                return GetTeamListResponse.parse(result);
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void GetEarliestMatchDatePerLeagueAsync(String apiKey,String league) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        GetEarliestMatchDatePerLeagueAsync(apiKey, league, null);
    }
    
    public void GetEarliestMatchDatePerLeagueAsync(final String apiKey,final String league,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, GetEarliestMatchDateResponse>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected GetEarliestMatchDateResponse doInBackground(Void... params) {
                return GetEarliestMatchDatePerLeague(apiKey, league, headers);
            }
            @Override
            protected void onPostExecute(GetEarliestMatchDateResponse result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("GetEarliestMatchDatePerLeague", result);
                }
            }
        }.execute();
    }
    
    public GetEarliestMatchDateResponse GetEarliestMatchDatePerLeague(String apiKey,String league){
        return GetEarliestMatchDatePerLeague(apiKey, league, null);
    }
    
    public GetEarliestMatchDateResponse GetEarliestMatchDatePerLeague(String apiKey,String league,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://xmlsoccer.com/","GetEarliestMatchDatePerLeague");
        soapReq.addProperty("ApiKey",apiKey);
        soapReq.addProperty("league",league);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://xmlsoccer.com/GetEarliestMatchDatePerLeague", soapEnvelope,headers);
            }else{
                httpTransport.call("http://xmlsoccer.com/GetEarliestMatchDatePerLeague", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                return GetEarliestMatchDateResponse.parse(result);
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void GetLiveScoreAsync(String apiKey) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        GetLiveScoreAsync(apiKey, null);
    }
    
    public void GetLiveScoreAsync(final String apiKey,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, GetLiveScoreListResponse>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected GetLiveScoreListResponse doInBackground(Void... params) {
                return GetLiveScore(apiKey, headers);
            }
            @Override
            protected void onPostExecute(GetLiveScoreListResponse result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("GetLiveScore", result);
                }
            }
        }.execute();
    }
    
    public GetLiveScoreListResponse GetLiveScore(String apiKey){
        return GetLiveScore(apiKey, null);
    }
    
    public GetLiveScoreListResponse GetLiveScore(String apiKey,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://xmlsoccer.com/","GetLiveScore");
        soapReq.addProperty("ApiKey",apiKey);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://xmlsoccer.com/GetLiveScore", soapEnvelope,headers);
            }else{
                httpTransport.call("http://xmlsoccer.com/GetLiveScore", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                return GetLiveScoreListResponse.parse(result);
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void GetLiveScoreByLeagueAsync(String apiKey,String league) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        GetLiveScoreByLeagueAsync(apiKey, league, null);
    }
    
    public void GetLiveScoreByLeagueAsync(final String apiKey,final String league,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, GetLiveScoreListResponse>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected GetLiveScoreListResponse doInBackground(Void... params) {
                return GetLiveScoreByLeague(apiKey, league, headers);
            }
            @Override
            protected void onPostExecute(GetLiveScoreListResponse result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("GetLiveScoreByLeague", result);
                }
            }
        }.execute();
    }
    
    public GetLiveScoreListResponse GetLiveScoreByLeague(String apiKey,String league){
        return GetLiveScoreByLeague(apiKey, league, null);
    }
    
    public GetLiveScoreListResponse GetLiveScoreByLeague(String apiKey,String league,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://xmlsoccer.com/","GetLiveScoreByLeague");
        soapReq.addProperty("ApiKey",apiKey);
        soapReq.addProperty("league",league);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://xmlsoccer.com/GetLiveScoreByLeague", soapEnvelope,headers);
            }else{
                httpTransport.call("http://xmlsoccer.com/GetLiveScoreByLeague", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                return GetLiveScoreListResponse.parse(result);
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void GetPlayersByTeamAsync(String apiKey,String teamId) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        GetPlayersByTeamAsync(apiKey, teamId, null);
    }
    
    public void GetPlayersByTeamAsync(final String apiKey,final String teamId,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, GetPlayerListResponse>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected GetPlayerListResponse doInBackground(Void... params) {
                return GetPlayersByTeam(apiKey, teamId, headers);
            }
            @Override
            protected void onPostExecute(GetPlayerListResponse result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("GetPlayersByTeam", result);
                }
            }
        }.execute();
    }
    
    public GetPlayerListResponse GetPlayersByTeam(String apiKey,String teamId){
        return GetPlayersByTeam(apiKey, teamId, null);
    }
    
    public GetPlayerListResponse GetPlayersByTeam(String apiKey,String teamId,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://xmlsoccer.com/","GetPlayersByTeam");
        soapReq.addProperty("ApiKey",apiKey);
        soapReq.addProperty("teamId",teamId);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://xmlsoccer.com/GetPlayersByTeam", soapEnvelope,headers);
            }else{
                httpTransport.call("http://xmlsoccer.com/GetPlayersByTeam", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                return GetPlayerListResponse.parse(result);
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void GetPlayerByIdAsync(String apiKey,int playerId) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        GetPlayerByIdAsync(apiKey, playerId, null);
    }
    
    public void GetPlayerByIdAsync(final String apiKey,final int playerId,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, GetPlayerResponse>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected GetPlayerResponse doInBackground(Void... params) {
                return GetPlayerById(apiKey, playerId, headers);
            }
            @Override
            protected void onPostExecute(GetPlayerResponse result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("GetPlayerById", result);
                }
            }
        }.execute();
    }
    
    public GetPlayerResponse GetPlayerById(String apiKey,int playerId){
        return GetPlayerById(apiKey, playerId, null);
    }
    
    public GetPlayerResponse GetPlayerById(String apiKey,int playerId,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://xmlsoccer.com/","GetPlayerById");
        soapReq.addProperty("ApiKey",apiKey);
        soapReq.addProperty("playerId",playerId);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://xmlsoccer.com/GetPlayerById", soapEnvelope,headers);
            }else{
                httpTransport.call("http://xmlsoccer.com/GetPlayerById", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                return GetPlayerResponse.parse(result);
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
}
